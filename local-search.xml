<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>接雨水</title>
    <link href="/2023/08/17/%E6%8E%A5%E9%9B%A8%E6%B0%B4/"/>
    <url>/2023/08/17/%E6%8E%A5%E9%9B%A8%E6%B0%B4/</url>
    
    <content type="html"><![CDATA[<h2 id="按照列来计算"><a href="#按照列来计算" class="headerlink" title="按照列来计算"></a>按照列来计算</h2><p>首先，如果按照列来计算的话，宽度一定是1了，我们再把每一列的雨水的高度求出来就可以了。</p><p>可以看出每一列雨水的高度，取决于，该列 左侧最高的柱子和右侧最高的柱子中最矮的那个柱子的高度。</p><img src="/2023/08/17/%E6%8E%A5%E9%9B%A8%E6%B0%B4/%E6%88%AA%E5%9B%BE1.png" class="" title="你好世界"><img src="/2023/08/17/%E6%8E%A5%E9%9B%A8%E6%B0%B4/%E6%88%AA%E5%9B%BE2.png" class="" title="你好世界"><h2 id="动态规划解法"><a href="#动态规划解法" class="headerlink" title="动态规划解法"></a>动态规划解法</h2><p>在上一节的双指针解法中，我们可以看到只要记录左边柱子的最高高度 和 右边柱子的最高高度，就可以计算当前位置的雨水面积，这就是通过列来计算。</p><p>当前列雨水面积：min(左边柱子的最高高度，记录右边柱子的最高高度) - 当前柱子高度。</p><p>为了得到两边的最高高度，使用了双指针来遍历，每到一个柱子都向两边遍历一遍，这其实是有重复计算的。我们把每一个位置的左边最高高度记录在一个数组上（maxLeft），右边最高高度记录在一个数组上（maxRight）。这样就避免了重复计算，这就用到了动态规划。</p><p>当前位置，左边的最高高度是前一个位置的左边最高高度和本高度的最大值。</p><p>即从左向右遍历：maxLeft[i] &#x3D; max(height[i], maxLeft[i - 1]);</p><p>从右向左遍历：maxRight[i] &#x3D; max(height[i], maxRight[i + 1]);</p><img src="/2023/08/17/%E6%8E%A5%E9%9B%A8%E6%B0%B4/%E6%88%AA%E5%9B%BE3.png" class="" title="你好世界">]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单调栈</title>
    <link href="/2023/08/17/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    <url>/2023/08/17/%E5%8D%95%E8%B0%83%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<blockquote><p>单调栈通常是一维数组，要寻找任一个元素的右边或者左边第一个比自己大或者小的元素的位置，此时我们就要想到可以用单调栈了。<br>时间复杂度为O(n)。</p></blockquote><p>例如本题其实就是找找到一个元素右边第一个比自己大的元素。此时就应该想到用单调栈了。</p><p>那么单调栈的原理是什么呢？为什么时间复杂度是O(n)就可以找到每一个元素的右边第一个比它大的元素位置呢？</p><p>单调栈的本质是空间换时间，因为在遍历的过程中需要用一个栈来记录右边第一个比当前元素高的元素，优点是只需要遍历一次。</p><p>在使用单调栈的时候首先要明确如下几点：</p><ol><li>单调栈里存放的元素是什么？单调栈里只需要存放元素的下标i就可以了，如果需要使用对应的元素，直接T[i]就可以获取。</li><li>单调栈里元素是递增呢？ 还是递减呢？注意一下顺序为 从栈头到栈底的顺序，因为单纯的说从左到右或者从前到后，不说栈头朝哪个方向的话，大家一定会越看越懵。这里我们要使用递增循序（再强调一下是指从栈头到栈底的顺序），因为只有递增的时候，加入一个元素i，才知道栈顶元素在数组中右面第一个比栈顶元素大的元素是i。</li></ol><img src="/2023/08/17/%E5%8D%95%E8%B0%83%E6%A0%88/%E6%88%AA%E5%9B%BE.png" class="" title="你好世界">]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回溯算法</title>
    <link href="/2023/08/17/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    <url>/2023/08/17/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>回溯法也可以叫做回溯搜索法，它是一种搜索的方式。回溯是递归的副产品，只要有递归就会有回溯。虽然回溯法很难，很不好理解，但是回溯法并不是什么高效的算法。因为回溯的本质是穷举，穷举所有可能，然后选出我们想要的答案，如果想让回溯法高效一些，可以加一些剪枝的操作，但也改不了回溯法就是穷举的本质。回溯法，一般可以解决如下几种问题：</p><ul><li>组合问题：N个数里面按一定规则找出k个数的集合</li><li>切割问题：一个字符串按一定规则有几种切割方式</li><li>子集问题：一个N个数的集合里有多少符合条件的子集</li><li>排列问题：N个数按一定规则全排列，有几种排列方式</li><li>棋盘问题：N皇后，解数独等等</li></ul><h2 id="如何理解回溯法"><a href="#如何理解回溯法" class="headerlink" title="如何理解回溯法"></a>如何理解回溯法</h2><p>回溯法解决的问题都可以抽象为树形结构，因为回溯法解决的都是在集合中递归查找子集，集合的大小就构成了树的宽度，递归的深度，都构成的树的深度。递归就要有终止条件，所以必然是一棵高度有限的树（N叉树）。</p><h2 id="回溯法模板"><a href="#回溯法模板" class="headerlink" title="回溯法模板"></a>回溯法模板</h2><p>这份模板很重要，后面做回溯法的题目都靠它了！</p><img src="/2023/08/17/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/%E6%88%AA%E5%9B%BE.png" class="" title="你好世界"><p>for循环就是遍历集合区间，可以理解一个节点有多少个孩子，这个for循环就执行多少次。backtracking这里自己调用自己，实现递归。<br>for循环可以理解是横向遍历，backtracking（递归）就是纵向遍历，这样就把这棵树全遍历完了，一般来说，搜索叶子节点就是找的其中一个结果了。<br>分析完过程，回溯算法模板框架如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtracking</span><span class="hljs-params">(参数)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (终止条件) &#123;<br>        存放结果;<br>        <span class="hljs-keyword">return</span>; <br>    &#125;<br>    <span class="hljs-keyword">for</span> (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) &#123;<br>        处理节点;<br>        <span class="hljs-built_in">backtracking</span>(路径，选择列表); <span class="hljs-comment">// 递归</span><br>        回溯，撤销处理结果<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集</h2><img src="/2023/08/17/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/%E6%88%AA%E5%9B%BE1.png" class="" title="你好世界"><img src="/2023/08/17/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/%E6%88%AA%E5%9B%BE2.png" class="" title="你好世界"><h2 id="递增子序列"><a href="#递增子序列" class="headerlink" title="递增子序列"></a>递增子序列</h2><img src="/2023/08/17/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/%E6%88%AA%E5%9B%BE3.png" class="" title="你好世界"><h2 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h2><img src="/2023/08/17/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/%E6%88%AA%E5%9B%BE4.png" class="" title="你好世界"><img src="/2023/08/17/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/%E6%88%AA%E5%9B%BE5.png" class="" title="你好世界">]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>plantuml工具画流程图</title>
    <link href="/2023/08/17/plantuml%E5%B7%A5%E5%85%B7%E7%94%BB%E6%B5%81%E7%A8%8B%E5%9B%BE/"/>
    <url>/2023/08/17/plantuml%E5%B7%A5%E5%85%B7%E7%94%BB%E6%B5%81%E7%A8%8B%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>详见<a href="https://plantuml.com/zh/">plantuml官网</a></p></blockquote><h2 id="时序图语法示例"><a href="#时序图语法示例" class="headerlink" title="时序图语法示例"></a>时序图语法示例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs Plantuml">@startuml upload<br><br>title vod上传<br><br>== 预上传 ==<br>autonumber<br><br>sdk -&gt; uploadapi: http post &quot;/vod/preupload&quot;<br><br>alt video类型资源<br>uploadapi -&gt; mediamanager: rpc GenerateVID 生成ID<br>mediamanager-&gt; Redis: incr自增ID<br>mediamanager-&gt; uploadapi: 规则:&#123;region：2位&#125;_&#123;uuid：16位&#125;_&#123;schemaIndex:本地配置000+dbIdx:自增ID取后三位&#125;\nDB号:&#123;schemaIndex:本地配置000+dbIdx:自增ID取后三位&#125;\n自增ID：DB记录当前序列号，用redis缓存。\n主备容灾：10s定时同步redis最新的序列号到mysql。<br>else image、audio资源<br>uploadapi -&gt; mediamanager: rpc GenerateMid 生成ID<br>mediamanager-&gt; Redis: sonyflake生成分布式唯一ID\nredis保存<br>mediamanager-&gt; uploadapi: 返回ID<br>end<br><br>uploadapi -&gt; Strategyservice: rpc GetStrategyInfo获取调度策略<br>Strategyservice -&gt; Strategyservice: 查询调度策略配置获取CDN域名<br>Strategyservice-&gt; uploadapi:返回CDN域名<br>uploadapi -&gt;uploadapi: 根据serviceOrder获取Token及其他信息,如果未取到结果，兜底返回网宿云<br>uploadapi -&gt; sdk: 返回云服务列表<br>sdk -&gt; endpointSDK:定期拉取策略配置，获取IP直出规则，并进行请求拦截改造操作（domain、host替换等）<br>sdk -&gt; sdk:最终上传resp<br><br><br>== SDK上传 ==<br>autonumber<br>sdk-&gt;cloud:文件传输<br>cloud --&gt; uss:异步回迁<br><br>== 回报结果，触发视频处理流程 ==<br>autonumber<br>sdk -&gt; uploadapi: http post &quot;/vod/reportupload&quot;<br>note right <br>上报质量<br>end note<br><br>uploadapi -&gt; mediamanager: 创建媒资信息落库\nrpc CreateVideoInfoWithFormat/CreateMediaInfoAndFormat<br>mediamanager -&gt; mysql: insert video_infos_tab_\n insert video_format_infos_tab_<br>mediamanager -&gt; redis: redis处理<br>uploadapi -&gt; vodprocess: rpc SubmitFlowTask提交流程任务<br>uploadapi -&gt; sdk: 返回结果<br><br><br>@enduml<br></code></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><img src="/2023/08/17/plantuml%E5%B7%A5%E5%85%B7%E7%94%BB%E6%B5%81%E7%A8%8B%E5%9B%BE/img.png" class="" title="你好世界">]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lru</title>
    <link href="/2023/08/17/lru/"/>
    <url>/2023/08/17/lru/</url>
    
    <content type="html"><![CDATA[<h2 id="C-版本"><a href="#C-版本" class="headerlink" title="C++版本"></a>C++版本</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LRUCache</span> &#123;<br>  list&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; cache;<br>  unordered_map&lt;<span class="hljs-type">int</span>, list&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;::iterator&gt; hash;<br>  <span class="hljs-type">int</span> size;<br><br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">LRUCache</span>(<span class="hljs-type">int</span> capacity) : <span class="hljs-built_in">size</span>(capacity) &#123;&#125;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;hash size:&quot;</span> &lt;&lt; hash.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span> (list&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;::iterator it = cache.<span class="hljs-built_in">begin</span>(); it != cache.<span class="hljs-built_in">end</span>();<br>         it++) &#123;<br>      cout &lt;&lt; it-&gt;first &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;<br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;-------&quot;</span> &lt;&lt; endl;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> </span>&#123;<br>    <span class="hljs-keyword">auto</span> it = hash.<span class="hljs-built_in">find</span>(key);<br>    <span class="hljs-keyword">if</span> (it == hash.<span class="hljs-built_in">end</span>()) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">auto</span> key_value = *it-&gt;second;<br>    <span class="hljs-comment">//删除，并放到最前面去</span><br>    cache.<span class="hljs-built_in">erase</span>(it-&gt;second);<br>    cache.<span class="hljs-built_in">push_front</span>(key_value);<br>    <span class="hljs-comment">// hash重置下</span><br>    hash[key] = cache.<span class="hljs-built_in">begin</span>();<br>    <span class="hljs-keyword">return</span> key_value.second;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">put</span><span class="hljs-params">(<span class="hljs-type">int</span> key, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">auto</span> it = hash.<span class="hljs-built_in">find</span>(key);<br>    <span class="hljs-keyword">if</span> (it != hash.<span class="hljs-built_in">end</span>()) &#123;<br>      <span class="hljs-keyword">auto</span> key_value = *it-&gt;second;<br>      <span class="hljs-comment">//删除，并放到最前面去</span><br>      cache.<span class="hljs-built_in">erase</span>(it-&gt;second);<br>      cache.<span class="hljs-built_in">push_front</span>(key_value);<br>      <span class="hljs-comment">// hash重置下</span><br>      hash[key] = cache.<span class="hljs-built_in">begin</span>();<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//新的插入</span><br>    cache.<span class="hljs-built_in">push_front</span>(<span class="hljs-built_in">make_pair</span>(key, value));<br>    hash[key] = cache.<span class="hljs-built_in">begin</span>();<br>    <span class="hljs-comment">//如果超出了淘汰旧的</span><br>    <span class="hljs-keyword">if</span> (cache.<span class="hljs-built_in">size</span>() &gt; size) &#123;<br>      hash.<span class="hljs-built_in">erase</span>(cache.<span class="hljs-built_in">back</span>().first);<br>      cache.<span class="hljs-built_in">pop_back</span>();<br>    &#125;<br>  &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-function">LRUCache <span class="hljs-title">cache</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span>;<br>  cache.<span class="hljs-built_in">put</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>  cache.<span class="hljs-built_in">put</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>  cache.<span class="hljs-built_in">print</span>();<br>  cache.<span class="hljs-built_in">put</span>(<span class="hljs-number">4</span>, <span class="hljs-number">34</span>);<br>  cache.<span class="hljs-built_in">print</span>();<br>  cache.<span class="hljs-built_in">put</span>(<span class="hljs-number">5</span>, <span class="hljs-number">35</span>);<br>  cache.<span class="hljs-built_in">print</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>读《红楼梦》有感</title>
    <link href="/2023/08/16/%E8%AF%BB%E7%BA%A2%E6%A5%BC%E6%A2%A6%E6%9C%89%E6%84%9F/"/>
    <url>/2023/08/16/%E8%AF%BB%E7%BA%A2%E6%A5%BC%E6%A2%A6%E6%9C%89%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<p>红楼梦是中国古典小说，作者曹雪芹和高鹗，以贾宝玉和林黛玉的爱情故事以及封建四大家族贾、史、王、薛的兴衰为主线，初读红楼梦，有些难度，先不说情节如何，单是复杂的人物关系以及宏大的场景就会让你眼花缭乱，因此先不说读懂红楼梦，要想耐心的读完这部小说，你就必须掌握两张地图，首先是人物关系图，其次是贾府地图。  </p><span id="more"></span><img src="/2023/08/16/%E8%AF%BB%E7%BA%A2%E6%A5%BC%E6%A2%A6%E6%9C%89%E6%84%9F/baby2.jpeg" class="" title="good"><p>作为中国古代四大名著之首，红楼梦具有很高的文学底蕴，是中国古代小艺术的巅峰。作者在小说中利用谐音来暗示人物的结局。即“真事隐去，假语村言”的特殊笔法。作者在刻画人物形象是着重描写人物的心理人物的衣着外貌，服饰的描写反映了当时的社会背景，使得这部小说不但具有很高的文学价值，还具有考古价值。小说本身与作者的人生经历有些相似，作者曹雪芹出生于官宦世家，早年过着不愁吃穿的生活，后来曹家因亏空获罪被满门抄斩，曹雪芹移居北京，靠朋友救济和卖字画度日，正是这段经历使他具备了写《红楼梦》的文化基础和思想觉悟。小说中的贾宝玉本是一块补天的石头，被一个僧人和一个道士带到人间，开始了充满曲折的人生经历，读完这部小说可能你对林黛玉的结局心生怜悯，作者正是想通过这种悲惨的结局来表达对封建势力的批判，结合作者的人生经历很容易想到作者这样写的目的。</p><p>接下来是小说的主要内容，有人说《红楼梦》就是一个男人和一群女人的故事，其实也不尽然，《红楼梦》开篇介绍的背景就暗含人物结局，这里就不浪费过多笔墨，这些自有研究红学的人解决，我认为小说大致可以分为三个部分，毕竟我对贾宝玉和这群地位不同的少女的平静的大观园生活不感冒，我比较喜欢有起伏的情节，到了最后四大家族由盛转衰，物是人非，正如作者自我评价：“满纸荒唐言，一把辛酸泪！都云作者痴，谁解其中味”。其实就是写了一段爱情故事，一千个读者眼中有一千个哈姆雷特。开国领袖毛主席评价小说《红楼梦》：（中国过去）除了地大物博，人口众多，历史悠久，以及在文学上有部《红楼梦》等等以外，很多地方不如人家，骄傲不起来。《红楼梦》不仅要当做小说看，而且要当做历史看。他写的是很细致的、很精细的社会历史”，文学家鲁迅则表示：“《红楼梦》是中国许多人所知道，至少，是知道这名目的书。谁是作者和续者姑且勿论，单是命意，就因读者的眼光而有种种：经学家看见《易》，道学家看见淫，才子看见缠绵，革命家看见排满，流言家看见宫闱秘事”，《人间词话》作者王国维认为：“《红楼梦》，哲学的也，宇宙的也，文学的也。此《红楼梦》之所以大背于吾国人之精神，而其价值亦即存乎此”。大家们对《红楼梦》有极高评价。</p><p>当你厌倦了色彩纷繁的荧屏，想感受那一缕墨香陪伴，不妨捧起《红楼梦》细细品读。</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读后感</tag>
      
      <tag>文学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你好，世界</title>
    <link href="/2023/08/16/%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C/"/>
    <url>/2023/08/16/%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C/</url>
    
    <content type="html"><![CDATA[<img src="/2023/08/16/%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C/beauty.png" class="" title="图片一"><hr><img src="/2023/08/16/%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C/baby.jpeg" class="" title="你好世界">]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
