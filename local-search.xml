<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>凤凰架构</title>
    <link href="/2023/08/17/%E5%87%A4%E5%87%B0%E6%9E%B6%E6%9E%84/"/>
    <url>/2023/08/17/%E5%87%A4%E5%87%B0%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="凤凰架构读书笔记"><a href="#凤凰架构读书笔记" class="headerlink" title="凤凰架构读书笔记"></a>凤凰架构读书笔记</h1><h2 id="演化历程简述"><a href="#演化历程简述" class="headerlink" title="演化历程简述"></a>演化历程简述</h2><ol><li>原始分布式时代：机器太挫了，得想办法分散到多个机器呀</li><li>Unix基金会纠集一批大厂，弄出个方案，RPC，分布式文件系统等雏形出来了</li><li>整个生态不成熟，用起来开发成本的心智成本太高了啊，咋解决这些问题？</li><li>单体系统时代：摩尔定律80年代大发展，机器性能越来越好。直接上单体系统真香</li><li>系统越来越臃肿，隔离性太差，不行还是得拆服务，搞分布式</li><li>SOA时代：面向服务，子系统拆成服务吧，插件式架构、事件驱动架构。同一技术框架下，系统独立运行部署</li><li>SOA同一技术框架下系统复杂度太高了，服务之间越来越不透明，理解成本太高了</li><li>微服务时代：真正的拆分，服务按照业务划分，有独立存储，轻量级的通信，自动化的部署</li><li>服务网格：虚拟化、容器化走起，但是微服务流量不好管理啊，我想细粒度的控制，有统一的鉴权认证容错等功能。</li><li>无服务：别管基础设施了，都在云上，你就说你要啥业务逻辑就行</li></ol><h2 id="1-原始分布式时代-1970-1980"><a href="#1-原始分布式时代-1970-1980" class="headerlink" title="1.原始分布式时代 1970-1980"></a>1.原始分布式时代 1970-1980</h2><p>背景：当时计算机硬件局促的运算处理能力，已直接妨碍到了在单台计算机上信息系统软件能够达到的最大规模</p><p>分布式探索：当时业界主流的计算机厂商一起参与，共同制订了名为“分布式运算环境”（DCE）的分布式技术体系。包括最早的RPC、分布式文件系统雏形等，Unix DCE 提出的分布式服务的设计主旨：“让开发人员不必关心服务是远程还是本地，都能够透明地调用服务或者访问资源。一个系统拆分到不同的机器中运行，这样做带来的服务发现、跟踪、通信、容错、隔离、配置、传输、数据一致性和编码复杂度等方面的问题，所付出的代价远远超过了分布式所取得的收益</p><p>原始分布式时代的教训：某个功能能够进行分布式，并不意味着它就应该进行分布式，强行追求透明的分布式操作，只会自寻苦果</p><p>有两条通往更大规模软件系统的道路：一条是找到更完美的解决如何构筑分布式系统的解决方案。一条是尽快提升单机的处理能力，以避免分布式带来的种种问题<br>80 年代正是摩尔定律开始稳定发挥作用的黄金时期，计算机的性能以惊人速度提升，信息系统进入了以单台或少量几台计算机即可作为服务器来支撑大型信息系统运作的单体时代，且在很长的一段时间内，单体都将是软件架构的绝对主流</p><h2 id="2-单体系统时代"><a href="#2-单体系统时代" class="headerlink" title="2.单体系统时代"></a>2.单体系统时代</h2><p>单体意味着自包含。单体应用描述了一种由同一技术平台的不同组件构成的单层软件</p><p>从横向角度来看，单体架构也可以支持按照技术、功能、职责等维度，将软件拆分为各种模块，以便重用和管理代码。单体系统并不意味着只能有一个整体的程序封装形式</p><p>纵向角度来看，分层架构（Layered Architecture）已是现在几乎所有信息系统建设中都普遍认可、采用的软件设计方法，无论是单体还是微服务，抑或是其他架构风格，都会对代码进行纵向层次</p><blockquote><p>由于隔离能力的缺失，单体除了难以阻断错误传播、不便于动态更新程序以外，还面临难以技术异构的困难，每个模块的代码都通常需要使用一样的程序语言，乃至一样的编程框架</p><p>这种架构风格潜在的观念是希望系统的每一个部件，每一处代码都尽量可靠，靠不出或少出缺陷来构建可靠系统。然而战术层面再优秀，也很难弥补战略层面的不足，单体靠高质量来保证高可靠性的思路，在小规模软件上还能运作良好，但系统规模越大，交付一个可靠的单体系统就变得越来越具有挑战性</p><p>为了允许程序出错，为了获得隔离、自治的能力，为了可以技术异构等目标，是继为了性能与算力之后，让程序再次选择分布式的理由</p></blockquote><h2 id="3-SOA时代"><a href="#3-SOA时代" class="headerlink" title="3.SOA时代"></a>3.SOA时代</h2><p>SOA 架构（Service-Oriented Architecture）面向服务的架构是一次具体地、系统性地成功解决分布式服务主要问题的架构模式。为了对大型的单体系统进行拆分，让每一个子系统都能独立地部署、运行、更新</p><h3 id="插件式架构"><a href="#插件式架构" class="headerlink" title="插件式架构:"></a>插件式架构:</h3><p>将这些主数据，连同其他可能被各子系统使用到的公共服务、数据、资源集中到一块，成为一个被所有业务系统共同依赖的核心（Kernel，也称为 Core System），具体的业务系统以插件模块（Plug-in Modules）的形式存在，这样也可提供可扩展的、灵活的、天然隔离的功能特性，即微内核架构</p><h3 id="事件驱动架构"><a href="#事件驱动架构" class="headerlink" title="事件驱动架构"></a>事件驱动架构</h3><p>在子系统之间建立一套事件队列管道（Event Queues），来自系统外部的消息将以事件的形式发送至管道中，各个子系统从管道里获取自己感兴趣、能够处理的事件消息，也可以为事件新增或者修改其中的附加信息，甚至可以自己发布一些新的事件到管道队列中去，如此，每一个消息的处理者都是独立的，高度解耦的，但又能与其他处理者（如果存在该消息处理者的话）通过事件管道进行互动</p><p>信息系统经历了巨石、烟囱、插件、事件、SOA 等的架构模式，应用受架构复杂度的牵绊却是越来越大，已经距离“透明”二字越来越远了，这是否算不自觉间忘记掉了当年的初心？</p><p>读到这里，你不妨回想下“如何使用多个独立的分布式服务共同构建一个更大型系统”这个问题，再回想下“原始分布式时代”一节中 Unix DCE 提出的分布式服务的设计主旨</p><h2 id="4-微服务架构"><a href="#4-微服务架构" class="headerlink" title="4.微服务架构"></a>4.微服务架构</h2><p>微服务是一种软件开发技术，是一种 SOA 的变体形式；微服务是一种通过多个小型服务组合来构建单个应用的架构风格；服务围绕业务能力而非特定的技术标准来构建；不同的数据存储技术，运行在不同的进程之中；服务采取轻量级的通信机制和自动化的部署机制实现通信与运维</p><h3 id="围绕业务能力构建"><a href="#围绕业务能力构建" class="headerlink" title="围绕业务能力构建"></a>围绕业务能力构建</h3><p>这里再次强调了康威定律的重要性，有怎样结构、规模、能力的团队，就会产生出对应结构、规模、能力的产品。这个结论不是某个团队、某个公司遇到的巧合，而是必然的演化结果。如果本应该归属同一个产品内的功能被划分在不同团队中，必然会产生大量的跨团队沟通协作，跨越团队边界无论在管理、沟通、工作安排上都有更高昂的成本，高效的团队自然会针对其进行改进，当团队、产品磨合调节稳定之后，团队与产品就会拥有一致的结构。</p><h3 id="分散治理"><a href="#分散治理" class="headerlink" title="分散治理"></a>分散治理</h3><p>这是要表达“谁家孩子谁来管”的意思，服务对应的开发团队有直接对服务运行质量负责的责任，也应该有着不受外界干预地掌控服务各个方面的权力，譬如选择与其他服务异构的技术来实现自己的服务</p><h3 id="通过服务来实现独立自治的组件"><a href="#通过服务来实现独立自治的组件" class="headerlink" title="通过服务来实现独立自治的组件"></a>通过服务来实现独立自治的组件</h3><p>之所以强调通过“服务”（Service）而不是“类库”（Library）来构建组件，是因为类库在编译期静态链接到程序中，通过本地调用来提供功能，而服务是进程外组件，通过远程调用来提供功能</p><h3 id="产品化思维"><a href="#产品化思维" class="headerlink" title="产品化思维"></a>产品化思维</h3><p>避免把软件研发视作要去完成某种功能，而是视作一种持续改进、提升的过程。譬如，不应该把运维只看作运维团队的事，把开发只看作开发团队的事，团队应该为软件产品的整个生命周期负责，开发者不仅应该知道软件如何开发，还应该知道它如何运作，用户如何反馈，乃至售后支持工作是怎样进行的。</p><h3 id="数据去中心化"><a href="#数据去中心化" class="headerlink" title="数据去中心化"></a>数据去中心化</h3><p>微服务明确地提倡数据应该按领域分散管理、更新、维护、存储，在单体服务中，一个系统的各个功能模块通常会使用同一个数据库，诚然中心化的存储天生就更容易避免一致性问题</p><h3 id="强终端弱管道"><a href="#强终端弱管道" class="headerlink" title="强终端弱管道"></a>强终端弱管道</h3><p>弱管道（Dumb Pipe）几乎算是直接指名道姓地反对 SOAP 和 ESB 的那一堆复杂的通信机制。ESB 可以处理消息的编码加工、业务规则转换等；BPM 可以集中编排企业业务服务；SOAP 有几十个 WS-*协议族在处理事务、一致性、认证授权等一系列工作，这些构筑在通信管道上的功能也许对某个系统中的某一部分服务是有必要的，但对于另外更多的服务则是强加进来的负担。如果服务需要上面的额外通信能力，就应该在服务自己的 Endpoint 上解决，而不是在通信管道上一揽子处理。微服务提倡类似于经典 UNIX 过滤器那样简单直接的通信方式，RESTful 风格的通信在微服务中会是更加合适的选择。</p><h3 id="容错性设计"><a href="#容错性设计" class="headerlink" title="容错性设计"></a>容错性设计</h3><p>不再虚幻地追求服务永远稳定，而是接受服务总会出错的现实，要求在微服务的设计中，有自动的机制对其依赖的服务能够进行快速故障检测，在持续出错的时候进行隔离，在服务恢复的时候重新联通。所以“断路器”这类设施，对实际生产环境的微服务来说并不是可选的外围组件，而是一个必须的支撑点，如果没有容错性的设计，系统很容易就会被因为一两个服务的崩溃所带来的雪崩效应淹没。可靠系统完全可能由会出错的服务组成，这是微服务最大的价值所在，也是这部开源文档标题“凤凰架构”的含义。</p><h3 id="演进式设计"><a href="#演进式设计" class="headerlink" title="演进式设计"></a>演进式设计</h3><p>容错性设计承认服务会出错，演进式设计则是承认服务会被报废淘汰。一个设计良好的服务，应该是能够报废的，而不是期望得到长存永生。假如系统中出现不可更改、无可替代的服务，这并不能说明这个服务是多么的优秀、多么的重要，反而是一种系统设计上脆弱的表现，微服务所追求的独立、自治，也是反对这种脆弱性的表现。</p><h3 id="基础设施自动化"><a href="#基础设施自动化" class="headerlink" title="基础设施自动化"></a>基础设施自动化</h3><p>基础设施自动化，如 CI&#x2F;CD 的长足发展，显著减少了构建、发布、运维工作的复杂性。由于微服务下运维的对象比起单体架构要有数量级的增长，使用微服务的团队更加依赖于基础设施的自动化，人工是很难支撑成百上千乃至成千上万级别的服务的。</p><h3 id="后微服务时代"><a href="#后微服务时代" class="headerlink" title="后微服务时代"></a>后微服务时代</h3><p>从软件层面独力应对微服务架构问题，发展到软、硬一体，合力应对架构问题的时代，此即为“后微服务时代”。</p><p>当虚拟化的基础设施从单个服务的容器扩展至由多个容器构成的服务集群、通信网络和存储设施时，软件与硬件的界限便已经模糊。一旦虚拟化的硬件能够跟上软件的灵活性，那些与业务无关的技术性问题便有可能从软件层面剥离，悄无声息地解决于硬件基础设施之内，让软件得以只专注业务，真正“围绕业务能力构建”团队与产品</p><p>Kubernetes 成为容器战争胜利者标志着后微服务时代的开端，但 Kubernetes 仍然没有能够完美解决全部的分布式问题——“不完美”的意思是，仅从功能上看，单纯的 Kubernetes 反而不如之前的 Spring Cloud 方案</p><p>举个例子，微服务 A 调用了微服务 B 的两个服务，称为 B1和 B2，假设 B1表现正常但 B2出现了持续的 500 错，那在达到一定阈值之后就应该对 B2进行熔断，以避免产生雪崩效应。如果仅在基础设施层面来处理，这会遇到一个两难问题，切断 A 到 B 的网络通路则会影响到 B1的正常调用，不切断的话则持续受 B2的错误影响。</p><p>以上问题在通过 Spring Cloud 这类应用代码实现的微服务中并不难处理，既然是使用程序代码来解决问题，只要合乎逻辑，想要实现什么功能，只受限于开发人员的想象力与技术能力，但基础设施是针对整个容器来管理的，粒度相对粗旷，只能到容器层面，对单个远程服务就很难有效管控。类似的情况不仅仅在断路器上出现，服务的监控、认证、授权、安全、负载均衡等都有可能面临细化管理的需求，譬如服务调用时的负载均衡，往往需要根据流量特征，调整负载均衡的层次、算法，等等，而 DNS 尽管能实现一定程度的负载均衡，但通常并不能满足这些额外的需求。</p><h3 id="服务网格"><a href="#服务网格" class="headerlink" title="服务网格"></a>服务网格</h3><p>由系统自动在服务容器（通常是指 Kubernetes 的 Pod）中注入一个通信代理服务器，相当于那个挎斗，以类似网络安全里中间人攻击的方式进行流量劫持，在应用毫无感知的情况下，悄然接管应用所有对外通信。这个代理除了实现正常的服务间通信外（称为数据平面通信），还接收来自控制器的指令（称为控制平面通信），根据控制平面中的配置，对数据平面通信的内容进行分析处理，以实现熔断、认证、度量、监控、负载均衡等各种附加功能。这样便实现了既不需要在应用层面加入额外的处理代码，也提供了几乎不亚于程序代码的精细管理能力。</p><p>未来 Kubernetes 将会成为服务器端标准的运行环境，如同现在 Linux 系统；服务网格将会成为微服务之间通信交互的主流模式，把“选择什么通信协议”、“怎样调度流量”、“如何认证授权”之类的技术问题隔离于程序代码之外，取代今天 Spring Cloud 全家桶中大部分组件的功能，微服务只需要考虑业务本身的逻辑，这才是最理想的Smart Endpoints解决方案。</p><p>上帝的归上帝，凯撒的归凯撒，业务与技术完全分离，远程与本地完全透明，也许这就是最好的时代了吧？</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读后感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式算法</title>
    <link href="/2023/08/17/%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%97%E6%B3%95/"/>
    <url>/2023/08/17/%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Paxos-Raft-ZAB"><a href="#Paxos-Raft-ZAB" class="headerlink" title="Paxos &amp; Raft &amp; ZAB"></a>Paxos &amp; Raft &amp; ZAB</h1><h2 id="Paxos"><a href="#Paxos" class="headerlink" title="Paxos"></a>Paxos</h2><h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><p>Paxos将系统中的角色分为提议者 (Proposer)，决策者 (Acceptor)，和最终决策学习者 (Learner):</p><ul><li>Proposer: 提出提案 (Proposal)。Proposal信息包括提案编号 (Proposal ID) 和提议的值 (Value)。</li><li>Acceptor: 参与决策，回应Proposers的提案。收到Proposal后可以接受提案，若Proposal获得多数Acceptors的接受，则称该Proposal被批准。</li><li>Learner: 不参与决策，从Proposers&#x2F;Acceptors学习最新达成一致的提案(Value)。</li></ul><p>在多副本状态机中，每个副本同时具有Proposer、Acceptor、Learner三种角色。</p><img src="/2023/08/17/%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%97%E6%B3%95/%E6%88%AA%E5%9B%BE1.png" class="" title="你好世界"><h3 id="第一阶段-Prepare阶段"><a href="#第一阶段-Prepare阶段" class="headerlink" title="第一阶段: Prepare阶段"></a>第一阶段: Prepare阶段</h3><p>Proposer向Acceptors发出Prepare请求，Acceptors针对收到的Prepare请求进行Promise承诺。</p><p>Prepare: Proposer生成全局唯一且递增的Proposal ID (可使用时间戳加Server ID)，向所有Acceptors发送Prepare请求，这里无需携带提案内容，只携带Proposal ID即可。</p><p>Promise: Acceptors收到Prepare请求后，做出“两个承诺，一个应答”。</p><p>承诺1: 不再接受Proposal ID小于等于(注意: 这里是&lt;&#x3D; )当前请求的Prepare请求;</p><p>承诺2: 不再接受Proposal ID小于(注意: 这里是&lt; )当前请求的Propose请求;</p><p>应答: 不违背以前作出的承诺下，回复已经Accept过的提案中Proposal ID最大的那个提案的Value和Proposal ID，没有则返回空值。</p><h3 id="第二阶段-Accept阶段"><a href="#第二阶段-Accept阶段" class="headerlink" title="第二阶段: Accept阶段"></a>第二阶段: Accept阶段</h3><p>Proposer收到多数Acceptors承诺的Promise后，向Acceptors发出Propose请求，Acceptors针对收到的Propose请求进行Accept处理。</p><p>Propose: Proposer 收到多数Acceptors的Promise应答后，从应答中选择Proposal ID最大的提案的Value，作为本次要发起的提案。如果所有应答的提案Value均为空值，则可以自己随意决定提案Value。然后携带当前Proposal ID，向所有Acceptors发送Propose请求。</p><p>Accept: Acceptor收到Propose请求后，在不违背自己之前作出的承诺下，接受并持久化当前Proposal ID和提案Value。</p><h3 id="第三阶段-Learn阶段"><a href="#第三阶段-Learn阶段" class="headerlink" title="第三阶段: Learn阶段"></a>第三阶段: Learn阶段</h3><p>Proposer在收到多数Acceptors的Accept之后，标志着本次Accept成功，决议形成，将形成的决议发送给所有Learners。</p><h2 id="Raft"><a href="#Raft" class="headerlink" title="Raft"></a>Raft</h2><h3 id="角色-1"><a href="#角色-1" class="headerlink" title="角色"></a>角色</h3><img src="/2023/08/17/%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%97%E6%B3%95/%E6%88%AA%E5%9B%BE2.png" class="" title="你好世界"><p>Raft将系统中的角色分为领导者(Leader)、跟从者(Follower)和候选人(Candidate):</p><ul><li>Leader: 接受客户端请求，并向Follower同步请求日志，当日志同步到大多数节点上后告诉Follower提交日志。</li><li>Follower: 接受并持久化Leader同步的日志，在Leader告之日志可以提交之后，提交日志。</li><li>Candidate: Leader选举过程中的临时角色。</li></ul><p>Raft要求系统在任意时刻最多只有一个Leader，正常工作期间只有Leader和Followers。</p><p>Raft算法将时间分为一个个的任期(term)，每一个term的开始都是Leader选举。在成功选举Leader之后，Leader会在整个term内管理整个集群。如果Leader选举失败，该term就会因为没有Leader而结束。</p><h3 id="Leader选举"><a href="#Leader选举" class="headerlink" title="Leader选举"></a>Leader选举</h3><p>Raft 使用心跳(heartbeat)触发Leader选举。当服务器启动时，初始化为Follower。Leader向所有Followers周期性发送heartbeat。如果Follower在选举超时时间内没有收到Leader的heartbeat，就会等待一段随机的时间后发起一次Leader选举。</p><p>Follower将其当前term加一然后转换为Candidate。它首先给自己投票并且给集群中的其他服务器发送 RequestVote RPC (RPC细节参见八、Raft算法总结)。结果有以下三种情况:</p><ul><li>赢得了多数的选票，成功选举为Leader；</li><li>收到了Leader的消息，表示有其它服务器已经抢先当选了Leader；</li><li>没有服务器赢得多数的选票，Leader选举失败，等待选举时间超时后发起下一次选举。</li></ul><h3 id="ZAB-协议"><a href="#ZAB-协议" class="headerlink" title="ZAB 协议"></a>ZAB 协议</h3><p>ZAB 协议全称：Zookeeper Atomic Broadcast（Zookeeper 原子广播协议）。</p><p>Zookeeper 是一个为分布式应用提供高效且可靠的分布式协调服务。在解决分布式一致性方面，Zookeeper 并没有使用 Paxos ，而是采用了 ZAB 协议。</p><p>ZAB 协议定义：ZAB 协议是为分布式协调服务 Zookeeper 专门设计的一种支持 崩溃恢复 和 原子广播 协议。下面我们会重点讲这两个东西。</p><p>基于该协议，Zookeeper 实现了一种 主备模式 的系统架构来保持集群中各个副本之间数据一致性。具体如下图所示：</p><img src="/2023/08/17/%E5%88%86%E5%B8%83%E5%BC%8F%E7%AE%97%E6%B3%95/%E6%88%AA%E5%9B%BE3.png" class="" title="你好世界"><p>ZAB 协议的消息广播过程使用的是一个原子广播协议，类似一个 二阶段提交过程。对于客户端发送的写请求，全部由 Leader 接收，Leader 将请求封装成一个事务 Proposal，将其发送给所有 Follwer ，然后，根据所有 Follwer 的反馈，如果超过半数成功响应，则执行 commit 操作（先提交自己，再发送 commit 给所有 Follwer）。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>接雨水</title>
    <link href="/2023/08/17/%E6%8E%A5%E9%9B%A8%E6%B0%B4/"/>
    <url>/2023/08/17/%E6%8E%A5%E9%9B%A8%E6%B0%B4/</url>
    
    <content type="html"><![CDATA[<h2 id="按照列来计算"><a href="#按照列来计算" class="headerlink" title="按照列来计算"></a>按照列来计算</h2><p>首先，如果按照列来计算的话，宽度一定是1了，我们再把每一列的雨水的高度求出来就可以了。</p><p>可以看出每一列雨水的高度，取决于，该列 左侧最高的柱子和右侧最高的柱子中最矮的那个柱子的高度。</p><img src="/2023/08/17/%E6%8E%A5%E9%9B%A8%E6%B0%B4/%E6%88%AA%E5%9B%BE1.png" class="" title="你好世界"><img src="/2023/08/17/%E6%8E%A5%E9%9B%A8%E6%B0%B4/%E6%88%AA%E5%9B%BE2.png" class="" title="你好世界"><h2 id="动态规划解法"><a href="#动态规划解法" class="headerlink" title="动态规划解法"></a>动态规划解法</h2><p>在上一节的双指针解法中，我们可以看到只要记录左边柱子的最高高度 和 右边柱子的最高高度，就可以计算当前位置的雨水面积，这就是通过列来计算。</p><p>当前列雨水面积：min(左边柱子的最高高度，记录右边柱子的最高高度) - 当前柱子高度。</p><p>为了得到两边的最高高度，使用了双指针来遍历，每到一个柱子都向两边遍历一遍，这其实是有重复计算的。我们把每一个位置的左边最高高度记录在一个数组上（maxLeft），右边最高高度记录在一个数组上（maxRight）。这样就避免了重复计算，这就用到了动态规划。</p><p>当前位置，左边的最高高度是前一个位置的左边最高高度和本高度的最大值。</p><p>即从左向右遍历：maxLeft[i] &#x3D; max(height[i], maxLeft[i - 1]);</p><p>从右向左遍历：maxRight[i] &#x3D; max(height[i], maxRight[i + 1]);</p><img src="/2023/08/17/%E6%8E%A5%E9%9B%A8%E6%B0%B4/%E6%88%AA%E5%9B%BE3.png" class="" title="你好世界">]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单调栈</title>
    <link href="/2023/08/17/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    <url>/2023/08/17/%E5%8D%95%E8%B0%83%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<blockquote><p>单调栈通常是一维数组，要寻找任一个元素的右边或者左边第一个比自己大或者小的元素的位置，此时我们就要想到可以用单调栈了。<br>时间复杂度为O(n)。</p></blockquote><p>例如本题其实就是找找到一个元素右边第一个比自己大的元素。此时就应该想到用单调栈了。</p><p>那么单调栈的原理是什么呢？为什么时间复杂度是O(n)就可以找到每一个元素的右边第一个比它大的元素位置呢？</p><p>单调栈的本质是空间换时间，因为在遍历的过程中需要用一个栈来记录右边第一个比当前元素高的元素，优点是只需要遍历一次。</p><p>在使用单调栈的时候首先要明确如下几点：</p><ol><li>单调栈里存放的元素是什么？单调栈里只需要存放元素的下标i就可以了，如果需要使用对应的元素，直接T[i]就可以获取。</li><li>单调栈里元素是递增呢？ 还是递减呢？注意一下顺序为 从栈头到栈底的顺序，因为单纯的说从左到右或者从前到后，不说栈头朝哪个方向的话，大家一定会越看越懵。这里我们要使用递增循序（再强调一下是指从栈头到栈底的顺序），因为只有递增的时候，加入一个元素i，才知道栈顶元素在数组中右面第一个比栈顶元素大的元素是i。</li></ol><img src="/2023/08/17/%E5%8D%95%E8%B0%83%E6%A0%88/%E6%88%AA%E5%9B%BE.png" class="" title="你好世界">]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回溯算法</title>
    <link href="/2023/08/17/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    <url>/2023/08/17/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>回溯法也可以叫做回溯搜索法，它是一种搜索的方式。回溯是递归的副产品，只要有递归就会有回溯。虽然回溯法很难，很不好理解，但是回溯法并不是什么高效的算法。因为回溯的本质是穷举，穷举所有可能，然后选出我们想要的答案，如果想让回溯法高效一些，可以加一些剪枝的操作，但也改不了回溯法就是穷举的本质。回溯法，一般可以解决如下几种问题：</p><ul><li>组合问题：N个数里面按一定规则找出k个数的集合</li><li>切割问题：一个字符串按一定规则有几种切割方式</li><li>子集问题：一个N个数的集合里有多少符合条件的子集</li><li>排列问题：N个数按一定规则全排列，有几种排列方式</li><li>棋盘问题：N皇后，解数独等等</li></ul><h2 id="如何理解回溯法"><a href="#如何理解回溯法" class="headerlink" title="如何理解回溯法"></a>如何理解回溯法</h2><p>回溯法解决的问题都可以抽象为树形结构，因为回溯法解决的都是在集合中递归查找子集，集合的大小就构成了树的宽度，递归的深度，都构成的树的深度。递归就要有终止条件，所以必然是一棵高度有限的树（N叉树）。</p><h2 id="回溯法模板"><a href="#回溯法模板" class="headerlink" title="回溯法模板"></a>回溯法模板</h2><p>这份模板很重要，后面做回溯法的题目都靠它了！</p><img src="/2023/08/17/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/%E6%88%AA%E5%9B%BE.png" class="" title="你好世界"><p>for循环就是遍历集合区间，可以理解一个节点有多少个孩子，这个for循环就执行多少次。backtracking这里自己调用自己，实现递归。<br>for循环可以理解是横向遍历，backtracking（递归）就是纵向遍历，这样就把这棵树全遍历完了，一般来说，搜索叶子节点就是找的其中一个结果了。<br>分析完过程，回溯算法模板框架如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtracking</span><span class="hljs-params">(参数)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (终止条件) &#123;<br>        存放结果;<br>        <span class="hljs-keyword">return</span>; <br>    &#125;<br>    <span class="hljs-keyword">for</span> (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) &#123;<br>        处理节点;<br>        <span class="hljs-built_in">backtracking</span>(路径，选择列表); <span class="hljs-comment">// 递归</span><br>        回溯，撤销处理结果<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集</h2><img src="/2023/08/17/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/%E6%88%AA%E5%9B%BE1.png" class="" title="你好世界"><img src="/2023/08/17/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/%E6%88%AA%E5%9B%BE2.png" class="" title="你好世界"><h2 id="递增子序列"><a href="#递增子序列" class="headerlink" title="递增子序列"></a>递增子序列</h2><img src="/2023/08/17/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/%E6%88%AA%E5%9B%BE3.png" class="" title="你好世界"><h2 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h2><img src="/2023/08/17/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/%E6%88%AA%E5%9B%BE4.png" class="" title="你好世界"><img src="/2023/08/17/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/%E6%88%AA%E5%9B%BE5.png" class="" title="你好世界">]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>plantuml工具画流程图</title>
    <link href="/2023/08/17/plantuml%E5%B7%A5%E5%85%B7%E7%94%BB%E6%B5%81%E7%A8%8B%E5%9B%BE/"/>
    <url>/2023/08/17/plantuml%E5%B7%A5%E5%85%B7%E7%94%BB%E6%B5%81%E7%A8%8B%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>详见<a href="https://plantuml.com/zh/">plantuml官网</a></p></blockquote><h2 id="时序图语法示例"><a href="#时序图语法示例" class="headerlink" title="时序图语法示例"></a>时序图语法示例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs Plantuml">@startuml upload<br><br>title vod上传<br><br>== 预上传 ==<br>autonumber<br><br>sdk -&gt; uploadapi: http post &quot;/vod/preupload&quot;<br><br>alt video类型资源<br>uploadapi -&gt; mediamanager: rpc GenerateVID 生成ID<br>mediamanager-&gt; Redis: incr自增ID<br>mediamanager-&gt; uploadapi: 规则:&#123;region：2位&#125;_&#123;uuid：16位&#125;_&#123;schemaIndex:本地配置000+dbIdx:自增ID取后三位&#125;\nDB号:&#123;schemaIndex:本地配置000+dbIdx:自增ID取后三位&#125;\n自增ID：DB记录当前序列号，用redis缓存。\n主备容灾：10s定时同步redis最新的序列号到mysql。<br>else image、audio资源<br>uploadapi -&gt; mediamanager: rpc GenerateMid 生成ID<br>mediamanager-&gt; Redis: sonyflake生成分布式唯一ID\nredis保存<br>mediamanager-&gt; uploadapi: 返回ID<br>end<br><br>uploadapi -&gt; Strategyservice: rpc GetStrategyInfo获取调度策略<br>Strategyservice -&gt; Strategyservice: 查询调度策略配置获取CDN域名<br>Strategyservice-&gt; uploadapi:返回CDN域名<br>uploadapi -&gt;uploadapi: 根据serviceOrder获取Token及其他信息,如果未取到结果，兜底返回网宿云<br>uploadapi -&gt; sdk: 返回云服务列表<br>sdk -&gt; endpointSDK:定期拉取策略配置，获取IP直出规则，并进行请求拦截改造操作（domain、host替换等）<br>sdk -&gt; sdk:最终上传resp<br><br><br>== SDK上传 ==<br>autonumber<br>sdk-&gt;cloud:文件传输<br>cloud --&gt; uss:异步回迁<br><br>== 回报结果，触发视频处理流程 ==<br>autonumber<br>sdk -&gt; uploadapi: http post &quot;/vod/reportupload&quot;<br>note right <br>上报质量<br>end note<br><br>uploadapi -&gt; mediamanager: 创建媒资信息落库\nrpc CreateVideoInfoWithFormat/CreateMediaInfoAndFormat<br>mediamanager -&gt; mysql: insert video_infos_tab_\n insert video_format_infos_tab_<br>mediamanager -&gt; redis: redis处理<br>uploadapi -&gt; vodprocess: rpc SubmitFlowTask提交流程任务<br>uploadapi -&gt; sdk: 返回结果<br><br><br>@enduml<br></code></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><img src="/2023/08/17/plantuml%E5%B7%A5%E5%85%B7%E7%94%BB%E6%B5%81%E7%A8%8B%E5%9B%BE/img.png" class="" title="你好世界">]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lru</title>
    <link href="/2023/08/17/lru/"/>
    <url>/2023/08/17/lru/</url>
    
    <content type="html"><![CDATA[<h2 id="C-版本"><a href="#C-版本" class="headerlink" title="C++版本"></a>C++版本</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LRUCache</span> &#123;<br>  list&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; cache;<br>  unordered_map&lt;<span class="hljs-type">int</span>, list&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;::iterator&gt; hash;<br>  <span class="hljs-type">int</span> size;<br><br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">LRUCache</span>(<span class="hljs-type">int</span> capacity) : <span class="hljs-built_in">size</span>(capacity) &#123;&#125;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;hash size:&quot;</span> &lt;&lt; hash.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span> (list&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;::iterator it = cache.<span class="hljs-built_in">begin</span>(); it != cache.<span class="hljs-built_in">end</span>();<br>         it++) &#123;<br>      cout &lt;&lt; it-&gt;first &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;<br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;-------&quot;</span> &lt;&lt; endl;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> </span>&#123;<br>    <span class="hljs-keyword">auto</span> it = hash.<span class="hljs-built_in">find</span>(key);<br>    <span class="hljs-keyword">if</span> (it == hash.<span class="hljs-built_in">end</span>()) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">auto</span> key_value = *it-&gt;second;<br>    <span class="hljs-comment">//删除，并放到最前面去</span><br>    cache.<span class="hljs-built_in">erase</span>(it-&gt;second);<br>    cache.<span class="hljs-built_in">push_front</span>(key_value);<br>    <span class="hljs-comment">// hash重置下</span><br>    hash[key] = cache.<span class="hljs-built_in">begin</span>();<br>    <span class="hljs-keyword">return</span> key_value.second;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">put</span><span class="hljs-params">(<span class="hljs-type">int</span> key, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">auto</span> it = hash.<span class="hljs-built_in">find</span>(key);<br>    <span class="hljs-keyword">if</span> (it != hash.<span class="hljs-built_in">end</span>()) &#123;<br>      <span class="hljs-keyword">auto</span> key_value = *it-&gt;second;<br>      <span class="hljs-comment">//删除，并放到最前面去</span><br>      cache.<span class="hljs-built_in">erase</span>(it-&gt;second);<br>      cache.<span class="hljs-built_in">push_front</span>(key_value);<br>      <span class="hljs-comment">// hash重置下</span><br>      hash[key] = cache.<span class="hljs-built_in">begin</span>();<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//新的插入</span><br>    cache.<span class="hljs-built_in">push_front</span>(<span class="hljs-built_in">make_pair</span>(key, value));<br>    hash[key] = cache.<span class="hljs-built_in">begin</span>();<br>    <span class="hljs-comment">//如果超出了淘汰旧的</span><br>    <span class="hljs-keyword">if</span> (cache.<span class="hljs-built_in">size</span>() &gt; size) &#123;<br>      hash.<span class="hljs-built_in">erase</span>(cache.<span class="hljs-built_in">back</span>().first);<br>      cache.<span class="hljs-built_in">pop_back</span>();<br>    &#125;<br>  &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-function">LRUCache <span class="hljs-title">cache</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span>;<br>  cache.<span class="hljs-built_in">put</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>  cache.<span class="hljs-built_in">put</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>  cache.<span class="hljs-built_in">print</span>();<br>  cache.<span class="hljs-built_in">put</span>(<span class="hljs-number">4</span>, <span class="hljs-number">34</span>);<br>  cache.<span class="hljs-built_in">print</span>();<br>  cache.<span class="hljs-built_in">put</span>(<span class="hljs-number">5</span>, <span class="hljs-number">35</span>);<br>  cache.<span class="hljs-built_in">print</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>读《红楼梦》有感</title>
    <link href="/2023/08/16/%E8%AF%BB%E7%BA%A2%E6%A5%BC%E6%A2%A6%E6%9C%89%E6%84%9F/"/>
    <url>/2023/08/16/%E8%AF%BB%E7%BA%A2%E6%A5%BC%E6%A2%A6%E6%9C%89%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<p>红楼梦是中国古典小说，作者曹雪芹和高鹗，以贾宝玉和林黛玉的爱情故事以及封建四大家族贾、史、王、薛的兴衰为主线，初读红楼梦，有些难度，先不说情节如何，单是复杂的人物关系以及宏大的场景就会让你眼花缭乱，因此先不说读懂红楼梦，要想耐心的读完这部小说，你就必须掌握两张地图，首先是人物关系图，其次是贾府地图。  </p><span id="more"></span><img src="/2023/08/16/%E8%AF%BB%E7%BA%A2%E6%A5%BC%E6%A2%A6%E6%9C%89%E6%84%9F/baby2.jpeg" class="" title="good"><p>作为中国古代四大名著之首，红楼梦具有很高的文学底蕴，是中国古代小艺术的巅峰。作者在小说中利用谐音来暗示人物的结局。即“真事隐去，假语村言”的特殊笔法。作者在刻画人物形象是着重描写人物的心理人物的衣着外貌，服饰的描写反映了当时的社会背景，使得这部小说不但具有很高的文学价值，还具有考古价值。小说本身与作者的人生经历有些相似，作者曹雪芹出生于官宦世家，早年过着不愁吃穿的生活，后来曹家因亏空获罪被满门抄斩，曹雪芹移居北京，靠朋友救济和卖字画度日，正是这段经历使他具备了写《红楼梦》的文化基础和思想觉悟。小说中的贾宝玉本是一块补天的石头，被一个僧人和一个道士带到人间，开始了充满曲折的人生经历，读完这部小说可能你对林黛玉的结局心生怜悯，作者正是想通过这种悲惨的结局来表达对封建势力的批判，结合作者的人生经历很容易想到作者这样写的目的。</p><p>接下来是小说的主要内容，有人说《红楼梦》就是一个男人和一群女人的故事，其实也不尽然，《红楼梦》开篇介绍的背景就暗含人物结局，这里就不浪费过多笔墨，这些自有研究红学的人解决，我认为小说大致可以分为三个部分，毕竟我对贾宝玉和这群地位不同的少女的平静的大观园生活不感冒，我比较喜欢有起伏的情节，到了最后四大家族由盛转衰，物是人非，正如作者自我评价：“满纸荒唐言，一把辛酸泪！都云作者痴，谁解其中味”。其实就是写了一段爱情故事，一千个读者眼中有一千个哈姆雷特。开国领袖毛主席评价小说《红楼梦》：（中国过去）除了地大物博，人口众多，历史悠久，以及在文学上有部《红楼梦》等等以外，很多地方不如人家，骄傲不起来。《红楼梦》不仅要当做小说看，而且要当做历史看。他写的是很细致的、很精细的社会历史”，文学家鲁迅则表示：“《红楼梦》是中国许多人所知道，至少，是知道这名目的书。谁是作者和续者姑且勿论，单是命意，就因读者的眼光而有种种：经学家看见《易》，道学家看见淫，才子看见缠绵，革命家看见排满，流言家看见宫闱秘事”，《人间词话》作者王国维认为：“《红楼梦》，哲学的也，宇宙的也，文学的也。此《红楼梦》之所以大背于吾国人之精神，而其价值亦即存乎此”。大家们对《红楼梦》有极高评价。</p><p>当你厌倦了色彩纷繁的荧屏，想感受那一缕墨香陪伴，不妨捧起《红楼梦》细细品读。</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读后感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你好，世界</title>
    <link href="/2023/08/16/%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C/"/>
    <url>/2023/08/16/%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C/</url>
    
    <content type="html"><![CDATA[<img src="/2023/08/16/%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C/beauty.png" class="" title="图片一"><hr><img src="/2023/08/16/%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C/baby.jpeg" class="" title="你好世界">]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
